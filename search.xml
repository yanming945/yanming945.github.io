<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DELLT5820T7820T7920工作站安装win7x64的方法</title>
    <url>/2020/10/06/DELLT5820T7820T7920%E5%B7%A5%E4%BD%9C%E7%AB%99%E5%AE%89%E8%A3%85win7x64%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>转载文章链接：<a href="http://www.dellgcc.com/?yingjianjiejuefangan/145.html" target="_blank" rel="noopener">http://www.dellgcc.com/?yingjianjiejuefangan/145.html</a></p>
<blockquote>
<p>故障现象:  第八代CPU W2102,W2123,W2133系列CPU,安装win7 （含PCIE SSD 固态硬盘）系统完整教程<br>测试环境:  T5820, 三星PCIE ssd<br>实验背景：The new Skylake CPU and chipsets have removed the legacy USB 2.0 hub， 所以第六代处理器安装WIN7 需要加载USB 3.0驱动才可以识别到U盘</p>
</blockquote>
<h2><span id="操作步骤">操作步骤:</span></h2><ol>
<li>系统启动盘制作</li>
<li>加载USB 3.0驱动</li>
<li>更改bios 设置</li>
<li>安装系统（加载IRST 或则 三星驱动）</li>
</ol>
<h2><span id="系统启动盘制作">系统启动盘制作</span></h2><p>1，下载win7 的ISO 镜像<br>2. 将U盘格式化成FAT32格式<br>3. 在系统下调出以管理员身份运行命令窗口，输入下面命令（U盘做成启动U盘的命令）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1，diskpart</span><br><span class="line">2，list disk   （显示当前磁盘个数与信息）</span><br><span class="line">3，select disk 1 （选择需要制作的U盘，根据显示的结果选择0还是1）</span><br><span class="line">4，clean （清除磁盘，类似于debug）</span><br><span class="line">5，create partition primary （创建主分区）</span><br><span class="line">6，select part 1  （选择刚才创建的分区）</span><br><span class="line">7，active        （激活为活动分区）</span><br><span class="line">输入完毕后关掉窗口</span><br></pre></td></tr></table></figure>
<p>4，打开磁盘管理器确认是否成功？ U盘显示活动主分区，那就制作成功<br>5. 把系统镜像拷贝到U盘里面 ，解压（解压到当前文件夹）出来</p>
<p>① 等您做完以上的操作。制作出来的U盘是legacy 引导模式的U盘， 硬盘格式 要求MBR ，F12 要选择legacy boot 下的U盘来引导<br>② 如果用户需要UEFI 模式引导的系统盘，需要做以下修改</p>
<p>  a: 打开刚才解压出来的souce 文件夹，使用压缩软件打开里面 install.wim 文件，定位到install.wim\1\windows\boot\EFI 文件夹， 然后把bootmgfw.eif 文件拷贝到桌面，重命名为bootx64.efi</p>
<p>  b: 把bootx64.efi文件拷贝到刚才解压出来的U盘根目录中的 boot文件夹 里面，</p>
<p>  c:逐步打开U盘目录的EFI 文件夹，打开microsoft 把整个boot 文件拷贝出来复制到efi 文件夹下，成功界面如图，然后再把bootx64.efi 放在这个boot文件夹里面。</p>
<p>到这里,现在的win7 U盘就支持 UEFI 引导</p>
<h2><span id="加载usb-30-驱动">加载USB 3.0 驱动</span></h2><p>方法一 ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 下载windwos7USB3.0 Meida Creator 使用程序</span><br><span class="line"></span><br><span class="line">2. 下载压缩的ZIP文件，解压缩使用程序和windows中文件夹，然后以管理员身份运行installer_creator.exe文件（右键单击该文件夹，选择以管理员身份运行）</span><br><span class="line">3． 如果出现提示,选择包括Windows7的USB驱动器  要放在U盘的根目录</span><br><span class="line"></span><br><span class="line">4 .单击工具中的“创建映像”按钮以启动USB3驱动程序写入到映像。（时间比较久，成功率比较低）</span><br><span class="line">5.创建完全映像之后,就可以开始安装了.</span><br></pre></td></tr></table></figure>
<p>方法二： 如果方法一create image 无法创建成功，可以用第二个方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WIN7_Boot下载地址：http:&#x2F;&#x2F;downloads.dell.com&#x2F;FOLDER03481374M&#x2F;1&#x2F;Win7_Boot.zip</span><br><span class="line"></span><br><span class="line">1.  把U盘接入一台正常使用的电脑,然后按上面地址下载WIN7_Boot, 然后把文件解压并把WIN7_Boot这个文件夹放在U盘的根目录下.</span><br><span class="line">2. 然后右键以管理员身份运行inject_driver.exe.</span><br><span class="line">3. USB3.0驱动加载成功 会提示：操作成功完成 （大概2分钟）</span><br><span class="line">4. 完成之后在需要安装系统的机器上从U盘来启动安装.</span><br></pre></td></tr></table></figure>

<h2><span id="bios-设置">BIOS  设置</span></h2><h3><span id="legacy-模式安装">Legacy 模式安装 ：</span></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">分别更改：Secure Boot-&gt; Secure Boot Enable –&gt; 选择DIsabled</span><br><span class="line">General-&gt;Advanced Boot Options-&gt; 勾选 enabled legacy option roms</span><br><span class="line">General -&gt;Boot sequence-&gt; 选中 legacy 前面的按钮</span><br></pre></td></tr></table></figure>

<h3><span id="uefi-模式安装">UEFI 模式安装</span></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">其他两项和上面一样，只要最后一项改为General -&gt;Boot sequence-&gt; 选中 UEFI前面的按钮，即可，等安装成功后 可以再关闭。</span><br><span class="line">硬盘模式的选项，根据实际情况更改。</span><br></pre></td></tr></table></figure>

<h2><span id="安装系统">安装系统</span></h2><p>1，开机看到Dell logo 选择 F12 选择 UEFI boot 中的USB 引导（根据客户实际情况选择，这里选UEFI）<br>2：在分区界面，提示缺少所需的CD/DVD 驱动器设备驱动程序。 点击浏览 (出现这个故障有2种可能，一种是认不到U盘（需要加载USB 3.0驱动），一种是认不到硬盘（加载硬盘驱动或则IRST）)<br>3 ，选择您的U盘，存放三星 pcie的驱动文件夹，选择下一步<br>4：成功加载硬盘驱动 点击下一步，<br>5：假如到这步发现下一步无法点击，点显示详细信息，会提示不能下一步的原因，这里的原因选中的磁盘具有MBR 分区表，那么在此界面 需要同时按住shift+ F10, 进入diskpart 通过命令将硬盘格式转化为GPT 即可<br>（大家简单记下，UEFI-&gt;GPT,  legacy-&gt;MBR）<br>6， 将硬盘转化为GPT 的具体命令</p>
<p>到此，第六代处理器三星的硬盘装系统方法都已经完成。</p>
<h2><span id="qampa">Q&amp;A</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1， 假如用户的机器是非三星的，在装系统过程中 如果再次提示缺少所需的CD&#x2F;DVD 驱动器设备驱动程序。</span><br><span class="line">A: 确认usb3.0正确加载的情况下，加载IRST的驱动，类似于工作站阵列卡的添加</span><br><span class="line">下载对应的IRST驱动（需要解压）并拷贝到WIN7 U盘中。下载地址如下：</span><br><span class="line">http:&#x2F;&#x2F;downloads.dell.com&#x2F;FOLDER03707771M&#x2F;1&#x2F;Serial-ATA_Driver_PFJ82_WN32_14.8.9.1053_A06.EXE</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2， 安装后 U盘无法识别，设备管理器显示USB 3.0驱动异常，但是鼠标键盘正常。</span><br><span class="line">A: 这个是由于客户的win7版本原因导致的，解决方案两种</span><br><span class="line">①：如果客户有配置光驱， 把机器的驱动在另外机器下载后，刻录到光盘后安装</span><br><span class="line">②：如果客户没有光驱，可以制作一个win8或则win10 PE，进入win8或则win10，通过U盘，把驱动拷贝到硬盘，重启进入系统后安装。</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3，为什么 需要加载 3.0驱动，加载 硬盘或则IRST 驱动</span><br><span class="line">A: 加载3.0驱动 是为了识别U盘， 加载IRST驱动或硬盘驱动，是为识别硬盘。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DELL</category>
      </categories>
  </entry>
  <entry>
    <title>hexo的安装和主题的替换</title>
    <url>/2020/05/02/hexo%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%B8%BB%E9%A2%98%E7%9A%84%E6%9B%BF%E6%8D%A2/</url>
    <content><![CDATA[<h3><span id="环境">环境</span></h3><p>  OS：windows 10<br>  node.js<br>  Git</p>
<h3><span id="准备工作">准备工作</span></h3><p>安装node.js<br>安装Git<br><a href="https://hexo.io/zh-cn/docs" target="_blank" rel="noopener" title="官网链接">Hexo官网</a><br><a href="https://jingyan.baidu.com/article/d8072ac47aca0fec95cefd2d.html" target="_blank" rel="noopener">参考</a></p>
<h3><span id="验证nodejs是否成功">验证node.js是否成功</span></h3><p>  以下命令可以验证，输入命令后，输出版本号即安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#npm -v</span></span><br><span class="line">6.13.4</span><br></pre></td></tr></table></figure>
<div class="note info">
            <p>info 设置npm 国内源，不然默认的是国外源，影响下载，体验不好。<br>在cmd 下，输入命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config set registry &quot;https:&#x2F;&#x2F;registry.npm.taobao.org&quot;</span><br></pre></td></tr></table></figure>
          </div>

<h3><span id="hexo的安装">Hexo的安装</span></h3><h4><span id="安装">安装</span></h4><p>终端执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br><span class="line">npm install -g hexo  //-g：global 全局安装</span><br></pre></td></tr></table></figure>
<h4><span id="初始化">初始化</span></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init blot //bolg 可以修改你想要的博客名字</span><br><span class="line"><span class="built_in">cd</span> blog  //切换路径，进入blog 文件夹内</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>开启hexo 服务器，执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br><span class="line">以下是运行成功后的结果：</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>
<p>在游览器打开： <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a><br>停止服务器运行，按照提示，组合键：Ctrl+C。<br>运行成功后，在游览器会显示hexo 默认的主题landscape。</p>
<h3><span id="更换主题">更换主题</span></h3><p>hexo 默认的主题是landscape，主题可以自定义。<br>到<a href="https://hexo.io/themes/" target="_blank" rel="noopener" title="主题官网">主题官网</a>上自行选择中意的主题。<br>这里选择的是<a href="https://jerryc.me/posts/21cfbf15/" target="_blank" rel="noopener" title="这里选择的是butterfly。">butterfly</a>。</p>
<h4><span id="下载主题">下载主题</span></h4><p>到blog的主目录下。执行下面的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone -b master https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;hexo-theme-butterfly.git themes&#x2F;Butterfly</span><br></pre></td></tr></table></figure>
<p>运行后，会在blog/themes下多出一个Butterfly的文件夹。</p>
<h4><span id="应用主题">应用主题</span></h4><p>在blog的目录下找到配置文件_config.yml，<br>在文件中找到theme: landscape  修改后，theme: Butterfly。<br>这样就主题应用完成</p>
<div class="note info">
            <p>info 运行服务器之前，需要安装一个插件，不安装的话，会报错。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus</span><br></pre></td></tr></table></figure>
          </div>

<p>接下来运行服务器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p><a href="https://yanming945.github.io/" target="_blank" rel="noopener" title="查看效果">查看效果</a></p>
<p>​</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>Windows UEFI 和 Legacy 的分区</title>
    <url>/2020/05/10/windwos_UEFI%E5%92%8CLegacy%E5%88%86%E5%8C%BA/</url>
    <content><![CDATA[<h3><span id="uefi-和-legacy-的分区区别">UEFI 和 Legacy 的分区区别</span></h3><p>以下都是以一个硬盘，选择新建后自动生成的分区。</p>
<blockquote>
<h4><span id="uefi">UEFI</span></h4><p><img src="https://s1.ax1x.com/2020/05/10/Y1gnAI.png" alt></p>
</blockquote>
<blockquote>
<h4><span id="legacy">Legacy</span></h4><p><img src="https://s1.ax1x.com/2020/05/10/Y1guNt.png" alt></p>
</blockquote>
<p>机器的引导模式是UEFI<br>若在Legacy下生成那种分区，安装完系统后则会出现No Boot的提示。如下图：<br><img src="https://s1.ax1x.com/2020/05/10/Y1RR1K.png" alt></p>
<p>不同机器会有不同的提示。</p>
<p>可以在虚拟机上自行测试，在物理机上测试，请备份好自己数据。</p>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
  </entry>
  <entry>
    <title>获取系统密钥方法</title>
    <url>/2020/08/01/%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E5%AF%86%E9%92%A5%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3><span id="操作步骤">操作步骤</span></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.  按Windows 徽标键 + R，弹出搜索框，输入powershell,找到Windows PowerShell，右键点击，点击以管理员身份运行它</span><br><span class="line"></span><br><span class="line">2.  复制这串代码  (Get-WmiObject -query &#39;select * from SoftwareLicensingService&#39;)              </span><br><span class="line"></span><br><span class="line">3.  在powershell窗口中，鼠标右键点击即可粘贴上，然后回车一下</span><br><span class="line"></span><br><span class="line">4.  等待几秒后，会显示出OEM的产品密钥出来</span><br><span class="line"></span><br><span class="line">5.  找到这个：OA3xOriginalProductKey：后面的25位就是OEM的产品密钥 </span><br><span class="line"></span><br><span class="line">6． 重新激活</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>windows</category>
      </categories>
  </entry>
  <entry>
    <title>电脑没声音怎么办？</title>
    <url>/2020/09/26/%E7%94%B5%E8%84%91%E6%B2%A1%E5%A3%B0%E9%9F%B3%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/</url>
    <content><![CDATA[<p>首先是系统环境是适用windows 10<br>只要硬件没故障，不说百分百能解决，但是百分之七八十还是可以的<br>以下是操作方案：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.点击桌面最左下角的win菜单按钮，右键选择设备管理器 </span><br><span class="line"></span><br><span class="line">2.进入设备管理器后选择声音，视频和游戏控制器 </span><br><span class="line"></span><br><span class="line">3.选择realtek，右键更新驱动程序 </span><br><span class="line"></span><br><span class="line">4.选择浏览我的计算机以查找驱动程序软件 </span><br><span class="line"></span><br><span class="line">5.选择让我从计算机上的可用驱动程序列表中选取 </span><br><span class="line"></span><br><span class="line">6.选择high definition Audio设备进行安装即可。</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>windows</category>
      </categories>
  </entry>
  <entry>
    <title>Dell_OS_Recovery_Tool 教程</title>
    <url>/2020/05/08/Dell-OS-Recovery-Tool/</url>
    <content><![CDATA[<h3><span id="准备工作">准备工作</span></h3><p>准备一个16G 的U盘，U盘的<font color="#FF0000">数据备份好</font><br>下载工具：<a href="https://dl.dell.com/FOLDER06054282M/1/Dell-USB-Recovery-Tool_9R9DC_WIN_2.3.6094.0_A00.EXE" target="_blank" rel="noopener">下载链接</a><br>下载路径可以选择桌面，这样比较好找。<br>下载后找到执行程序，程序的名字：Dell-USB-Recovery-Tool_9R9DC_WIN_2.3.6094.0_A00.exe<br>如图1：<br><img src="https://wx1.sbimg.cn/2020/05/08/e63f449d270f448177d4cc542d7c43e3.png" alt="avatar"><br>鼠标双击安装后出现图2<br><img src="https://wx1.sbimg.cn/2020/05/08/50c738042445725ac83b181d9767c0dd.png" alt><br>安装结束后出现图3<br><img src="https://wx2.sbimg.cn/2020/05/08/d0a5b3c475d5491b631eb69be7666126.png" alt><br>在桌面上出现程序的图标<br><img src="https://wx2.sbimg.cn/2020/05/08/3fa854a280764d4c249741a0a02cfbda.png" alt><br>这样工具就安装完成。</p>
<h3><span id="接下来就是制作安装系统镜像">接下来就是制作安装系统镜像</span></h3><p>鼠标双击程序图片<br><img src="https://wx2.sbimg.cn/2020/05/08/3fa854a280764d4c249741a0a02cfbda.png" alt></p>
<p>会出现以下的画面<br><img src="https://s1.ax1x.com/2020/05/08/YKcmo8.png" alt></p>
<p>不着急后输入服务标签，先切换到高级恢复,如下图，选择对于其他计算机，然后输入服务编码，下一步。<br><img src="https://s1.ax1x.com/2020/05/10/Y1stfS.png" alt></p>
<p>然后在选择系统下载。不选择由Supportassist自动化。选择完后，点击下载即可，这个就是下载戴尔机器出厂自带的系统。等待完成即可。<br><img src="https://s1.ax1x.com/2020/05/10/Y1s6YT.png" alt></p>
<p>等待完成即可。完成后，选择关闭即可，在移除U盘。<br>然后就做好一个系统安装U盘。</p>
]]></content>
      <categories>
        <category>DELL</category>
      </categories>
  </entry>
  <entry>
    <title>DjangoBlog部署教程</title>
    <url>/2020/08/15/DjangoBlog%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p><img src="https://wx2.sbimg.cn/2020/08/15/39cem.jpg" alt><br>本篇文章将会教你如何部署DjangoBlog项目。<br>请仔细阅读，并和自己的环境做对比。</p>
<div class="note info">
            <p>DjangoBlog 开源项目下载：<br><a href="https://gitee.com/lylinux/DjangoBlog" target="_blank" rel="noopener">https://gitee.com/lylinux/DjangoBlog</a></p>
          </div>

<h3><span id="环境">环境</span></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 系统是Debian 10</span><br><span class="line">* 本地使用：使用虚拟机，使用的IP 地址。</span><br><span class="line">* python虚拟环境目录在 ~&#x2F;python&#x2F;env</span><br><span class="line">* djangoblog源码位置在 ~&#x2F;python&#x2F;DjangoBlog</span><br><span class="line">* 系统的用户是Server</span><br><span class="line">* 编辑器使用vim，你可以使用你喜欢的编辑器。</span><br></pre></td></tr></table></figure>
<div class="note info">
            <p>可以使用VmWare虚拟机进行实验</p>
          </div>

<h3><span id="准备工作">准备工作</span></h3><h3><span id="升级系统">升级系统</span></h3><p>首先升级系统到最新版，以Root的账户下的终端下执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get upgrade</span><br></pre></td></tr></table></figure>
<p>系统更新之后，重启下系统，终端下执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p>重启之后，可以开始安装Myslq及Python环境。</p>
<h3><span id="安装mysql的准备">安装Mysql的准备</span></h3><p>要将 MySQL APT 存储库添加到系统，请转到存储库<a href="https://dev.mysql.com/downloads/repo/apt/" target="_blank" rel="noopener" title="下载页面">下载页面</a>并使用以下 wget 命令下载最新的发行包：<br>终端下执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;repo.mysql.com&#x2F;mysql-apt-config_0.8.13-1_all.deb</span><br></pre></td></tr></table></figure>
<p>下载完成后，以root 的用户执行安装发行:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get insatll install .&#x2F;mysql-apt-config_0.8.13-1_all.deb -y</span><br></pre></td></tr></table></figure>
<p>您将看到配置菜单，您可以从中选择要安装的 MySQL 版本。<br>本篇使用的MySQL 8.0<br>要安装 MySQL 8.0 版。按 Tab 并选择 OK 最后按下 Enter。</p>
<h3><span id="安装mysql">安装MySQL</span></h3><p>通过运行以下命令更新包列表并安装 MySQL 服务器包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install mysql-server -y</span><br></pre></td></tr></table></figure>
<p>安装程序将要求您设置 MySQL root 密码。记录设置的密码，后面会用的到。<br>安装完成后， MySQL 服务将自动启动，您可以通过键入以下内容来验证它：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl status mysql</span><br></pre></td></tr></table></figure>
<p>输出的结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">● mysql.service - MySQL Community Server</span><br><span class="line">   Loaded: loaded (&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mysql.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Sat 2020-08-15 11:32:25 CST; 10h ago</span><br><span class="line">     Docs: man:mysqld(8)</span><br><span class="line">           http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;en&#x2F;using-systemd.html</span><br><span class="line">  Process: 391 ExecStartPre&#x3D;&#x2F;usr&#x2F;share&#x2F;mysql-8.0&#x2F;mysql-systemd-start pre (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)</span><br><span class="line"> Main PID: 447 (mysqld)</span><br><span class="line">   Status: &quot;Server is operational&quot;</span><br><span class="line">    Tasks: 39 (limit: 2934)</span><br><span class="line">   Memory: 462.4M</span><br><span class="line">   CGroup: &#x2F;system.slice&#x2F;mysql.service</span><br><span class="line">           └─447 &#x2F;usr&#x2F;sbin&#x2F;mysqld</span><br><span class="line"></span><br><span class="line">Aug 15 11:31:58 debian10-ming systemd[1]: Starting MySQL Community Server...</span><br><span class="line">Aug 15 11:32:25 debian10-ming systemd[1]: Started MySQL Community Server.</span><br></pre></td></tr></table></figure>
<h3><span id="安装django的环境">安装Django的环境</span></h3><p>终端下运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install python3-dev python3-pip python-pip memcached -y</span><br><span class="line">apt-get install supervisor -y</span><br><span class="line">apt-get install nginx -y</span><br><span class="line">apt-get install python-dev default-libmysqlclient-dev</span><br></pre></td></tr></table></figure>
<p>接下来需要设置python的虚拟环境<br>设置Python的虚拟环境，配置如下：<br>安装虚拟环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install virtualenvwrapper -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure>
<div class="note info">
            <p>让PIP源使用国内镜像，提升下载速度和安装成功率<br>临时使用：<br>可以在使用pip的时候加参数-i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a><br>例如：pip install virtualenvwrapper -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>
          </div>


<p>创建放虚拟环境的文件夹，终端下执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p python&#x2F;env &amp;&amp; cd python&#x2F;env</span><br></pre></td></tr></table></figure>
<p>终端下执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nano ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure>
<p>安装完成后，在~/.bashrc写入以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export WORKON_HOME&#x3D;&#x2F;home&#x2F;server&#x2F;python&#x2F;env</span><br><span class="line">source &#x2F;usr&#x2F;local&#x2F;bin&#x2F;virtualenvwrapper.sh</span><br></pre></td></tr></table></figure>
<div class="note info">
            <p>第一行：virtualenvwrapper存放虚拟环境目录<br>第二行：virtrualenvwrapper会安装到python的bin目录下，所以该路径是python安装目录下bin/virtualenvwrapper.sh</p>
          </div>
<p>读入配置文件，立即生效，终端下执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source ~&#x2F;.bashrc</span><br><span class="line">virtualenv -p &#x2F;usr&#x2F;bin&#x2F;python3 djangoblog</span><br><span class="line">workon djangoblog</span><br></pre></td></tr></table></figure>
<p>这样就完成了Python虚拟环境的设置。</p>
<p>下面开始安装djangoblog运行所需要的依赖，终端下执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~&#x2F;python&#x2F;DjangoBlog</span><br><span class="line">pip install -Ur requirements.txt -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure>
<h3><span id="基本配置及部署">基本配置及部署</span></h3><h3><span id="配置mysql数据库">配置mysql数据库</span></h3><p>使用root用户登录,这时候就是安装mysql 的时候配置的密码。终端下执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line">CREATE USER &#39;djangoblog&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;DjAnGoBlOg123!@#&#39;;</span><br><span class="line">CREATE DATABASE &#96;djangoblog&#96; &#x2F;*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci *&#x2F;;</span><br><span class="line">GRANT all ON djangoblog.* TO &#39;djangoblog&#39;@&#39;localhost&#39;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">exit #退出</span><br></pre></td></tr></table></figure>
<p>同样，这里的DjAnGoBlOg123!@#密码也要改成你自己的密码。</p>
<h3><span id="修改djangoblog配置">修改djangoblog配置</span></h3><p>修改DjangoBlog/DjangoBlog/settings.py中的DATABASES配置，如下所示，当然，你也可以将其中的配置写入你的.bashrc中，这样就不需要改这个文件了，我这里只是介绍下如何修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DATABASES &#x3D; &#123;</span><br><span class="line">    &#39;default&#39;: &#123;</span><br><span class="line">        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,</span><br><span class="line">        &#39;NAME&#39;: &#39;djangoblog&#39;,</span><br><span class="line">        &#39;USER&#39;: &#39;djangoblog&#39;,</span><br><span class="line">        &#39;PASSWORD&#39;: &#39;DjAnGoBlOg123!@#&#39;,</span><br><span class="line">        &#39;HOST&#39;: &#39;localhost&#39;,</span><br><span class="line">        &#39;PORT&#39;: 3306,</span><br><span class="line">        &#39;OPTIONS&#39;: &#123;&#39;charset&#39;: &#39;utf8mb4&#39;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来开始执行数据库迁移，终端下执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;manage.py makemigrations</span><br><span class="line">.&#x2F;manage.py migrate</span><br><span class="line">.&#x2F;manage.py createsuperuser #创建超级用户</span><br><span class="line">.&#x2F;manage.py collectstatic --no-input</span><br><span class="line">.&#x2F;manage.py compress --force</span><br></pre></td></tr></table></figure>
<h3><span id="gunicorn-配置">gunicorn 配置</span></h3><p>安装，终端下执行:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source &#x2F;home&#x2F;server&#x2F;python&#x2F;env&#x2F;djangoblog&#x2F;bin&#x2F;activate</span><br><span class="line">pip install gunicorn -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure>
<p>配置，终端下执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nano &#x2F;home&#x2F;server&#x2F;python&#x2F;gunicorn_start.sh</span><br></pre></td></tr></table></figure>
<p>贴入如下内容:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">NAME&#x3D;&quot;DjangoBlog&quot;</span><br><span class="line">DJANGODIR&#x3D;&#x2F;home&#x2F;server&#x2F;python&#x2F;DjangoBlog #Django project directory</span><br><span class="line">USER&#x3D;server # the user to run as</span><br><span class="line">GROUP&#x3D;server # the group to run as</span><br><span class="line">NUM_WORKERS&#x3D;1 # how many worker processes should Gunicorn spawn</span><br><span class="line">DJANGO_SETTINGS_MODULE&#x3D;DjangoBlog.settings # which settings file should Django use</span><br><span class="line">DJANGO_WSGI_MODULE&#x3D;DjangoBlog.wsgi # WSGI module name</span><br><span class="line"></span><br><span class="line">echo &quot;Starting $NAME as &#96;whoami&#96;&quot;</span><br><span class="line"></span><br><span class="line"># Activate the virtual environment</span><br><span class="line">cd $DJANGODIR</span><br><span class="line">source &#x2F;home&#x2F;server&#x2F;python&#x2F;env&#x2F;djangoblog&#x2F;bin&#x2F;activate</span><br><span class="line">export DJANGO_SETTINGS_MODULE&#x3D;$DJANGO_SETTINGS_MODULE</span><br><span class="line">export PYTHONPATH&#x3D;$DJANGODIR:$PYTHONPATH</span><br><span class="line"></span><br><span class="line"># Create the run directory if it doesn&#39;t exist</span><br><span class="line">RUNDIR&#x3D;$(dirname $SOCKFILE)</span><br><span class="line">test -d $RUNDIR || mkdir -p $RUNDIR</span><br><span class="line"></span><br><span class="line"># Start your Django Unicorn</span><br><span class="line"># Programs meant to be run under supervisor should not daemonize themselves (do not use --daemon)</span><br><span class="line">exec &#x2F;home&#x2F;server&#x2F;python&#x2F;env&#x2F;djangoblog&#x2F;bin&#x2F;gunicorn  $&#123;DJANGO_WSGI_MODULE&#125;:application \</span><br><span class="line">--name $NAME \</span><br><span class="line">--workers $NUM_WORKERS \</span><br><span class="line">--user&#x3D;$USER --group&#x3D;$GROUP \</span><br><span class="line">--log-level&#x3D;debug \</span><br><span class="line">--log-file&#x3D;-</span><br></pre></td></tr></table></figure>
<div class="note info">
            <p>注意，将该文件中的server修改成你自己的用户</p>
          </div>
<p>增加可执行权限：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 755 gunicorn_start.sh</span><br><span class="line">.&#x2F;gunicorn_start.sh</span><br></pre></td></tr></table></figure>
<h3><span id="nginx配置">nginx配置</span></h3><p>终端下执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 删除默认配置</span><br><span class="line">rm &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;default</span><br><span class="line">nano &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;djangoblog.com.conf</span><br></pre></td></tr></table></figure>
<p>贴入如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    listen 80;</span><br><span class="line">    server_name 192.168.1.100;</span><br><span class="line">    root &#x2F;home&#x2F;server&#x2F;python&#x2F;DjangoBlog&#x2F;;</span><br><span class="line"></span><br><span class="line">    access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;django_access.log;</span><br><span class="line">    error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;django_error.log;</span><br><span class="line"></span><br><span class="line">    location &#x2F;static&#x2F; &#123;</span><br><span class="line">        alias &#x2F;home&#x2F;server&#x2F;python&#x2F;&#x2F;DjangoBlog&#x2F;collectedstatic&#x2F;;</span><br><span class="line">        expires max;</span><br><span class="line">        access_log        off;</span><br><span class="line">        log_not_found     off;</span><br><span class="line">    &#125;</span><br><span class="line">    location &#x2F;media &#123;</span><br><span class="line">        # 静态文件配置</span><br><span class="line">        alias &#x2F;home&#x2F;server&#x2F;python&#x2F;DjangoBlog&#x2F;uploads&#x2F;;</span><br><span class="line">        expires max;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ \.py$ &#123;</span><br><span class="line">        return 403;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_set_header X-NginX-Proxy true;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        if (!-f $request_filename) &#123;</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;127.0.0.1:8000;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info">
            <p>server_name 192.168.1.100;<br>这是你自己的服务器的IP地址。</p>
          </div>
<p>保存并退出。重启nginx:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;nginx restart</span><br></pre></td></tr></table></figure>
<h3><span id="配置supervisor">配置Supervisor</span></h3><p>终端下执行:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nano &#x2F;etc&#x2F;supervisor&#x2F;conf.d&#x2F;djangoblog.conf</span><br></pre></td></tr></table></figure>
<p>贴入如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[program:djangoblog]</span><br><span class="line">command &#x3D; &#x2F;home&#x2F;server&#x2F;python&#x2F;gunicorn_start.sh</span><br><span class="line">user &#x3D; server</span><br><span class="line">autostart&#x3D;true</span><br><span class="line">autorestart&#x3D;true</span><br><span class="line"></span><br><span class="line">redirect_stderr &#x3D; true</span><br><span class="line">stdout_logfile &#x3D; &#x2F;var&#x2F;log&#x2F;djangoblog.log</span><br><span class="line">stderr_logfile&#x3D;&#x2F;var&#x2F;log&#x2F;djangoblog.err</span><br></pre></td></tr></table></figure>
<p>同样，需要将server修改成你自己等用户名. 保存成功后继续执行:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">supervisorctl update</span><br><span class="line">supervisorctl reload </span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;memcached restart &amp;&amp; &#x2F;etc&#x2F;init.d&#x2F;nginx restart</span><br></pre></td></tr></table></figure>
<p>至此，全部完成。你可以通过你的浏览器访问你的服务器IP地址</p>
]]></content>
      <categories>
        <category>DjangoBlog</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/10/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2><span id="quick-start">Quick Start</span></h2><h3><span id="create-a-new-post">Create a new post</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3><span id="run-server">Run server</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3><span id="generate-static-files">Generate static files</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3><span id="deploy-to-remote-sites">Deploy to remote sites</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>轻松创建USB启动盘</title>
    <url>/2020/10/23/%E8%BD%BB%E6%9D%BE%E5%88%9B%E5%BB%BAUSB%E5%90%AF%E5%8A%A8%E7%9B%98/</url>
    <content><![CDATA[<h1><span id="使用rufus-轻松创建usb启动盘">使用rufus 轻松创建USB启动盘</span></h1><h1><span id="下载rufus">下载rufus</span></h1><p>Rufus 是一个可以帮助格式化和创建可引导USB闪存盘的工具，比如 USB 随身碟，记忆棒等等。</p>
<p>Rufus 是Ubuntu官网推荐的USB启动盘制作工具，此工具的特点：<br>* 体积小，只有几百KB （Rufus 2.17版只有945KB）<br>* 功能全<br>* 免安装，下载后可以直接使用<br>* 免费<br>* 开源Rufus 的官网： <a href="https://rufus.ie/" target="_blank" rel="noopener">https://rufus.ie</a></p>
<p>下载地址：<a href="https://github.com/pbatard/rufus/releases/download/v3.12/rufus-3.12p.exe" target="_blank" rel="noopener">https://github.com/pbatard/rufus/releases/download/v3.12/rufus-3.12p.exe</a></p>
<h1><span id="系统需求">系统需求：</span></h1><p>需要Windows 7以上的操作系统，无所谓32位还是64位，下载后开箱即用。</p>
<h1><span id="用法">用法</span></h1><p>下载可执行文件后直接运行 – 无需安装，绿色环保。</p>
<h1><span id="制作镜像">制作镜像</span></h1><p>如图选项, 依次选择”设备”, 加载”镜像”, 选择引导类型”BIOS 或 UEFI” . 点击”开始”按钮即可.**</p>
<p><img src="https://i.loli.net/2020/10/23/DSrxIBe8huOwHR3.png" alt="Rufus.png"></p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
  </entry>
</search>
